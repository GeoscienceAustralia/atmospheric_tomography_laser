# perm = c(3, 1, 5, 2,7, 4, 9, 6, 11, 8, 12, 10)
perm = c(3, 1, 5, 2, 6, 4)
bpg.edgelist = function(perm)
{
n = max(perm)
cols = c("black", "black")
el = c(0, perm[1], perm[n], n + 1 )
for(i in 1:(n-1))
{
if(abs(perm[i] - perm[i + 1]) != 1)
{
el = c(el, perm[i], perm[i+1])
cols = c(cols, "black")
}
}
pos = unlist(lapply(0:n, FUN = function(i) which(perm == i)))
pos = diff(pos)
gray.edges = which(abs(pos) > 1)
for(g in gray.edges)
{
el = c(el, g, g + 1)
cols = c(cols, "red")
}
if(perm[1] != 1){
el = c(el, 0,  1)
cols = c(cols, "red")
}
return(list(el, cols))
}
breakpoint.graph = function(perm)
{
tmp = bpg.edgelist(perm)
edge.list = matrix(tmp[[1]], ncol = 2, byrow = T) # igraph doesn't like 0 as a vertex id.
edge.cols = tmp[[2]]
bpg = graph.edgelist(edge.list + 1, directed = F)
E(bpg)$color = edge.cols
return(bpg)
}
is.balanced = function(graph)
{
edges = E(graph)
edges.cols = E(graph)$color
}
bpg = breakpoint.graph(perm)
degree(bpg)
tmp = bpg.edgelist(perm)
edge.list = matrix(tmp[[1]], ncol = 2, byrow = T) # igraph doesn't like 0 as a vertex id.
edge.list
perm = c(3, 1, 5, 2, 6, 4)
bpg.edgelist = function(perm)
{
n = max(perm)
cols = c("black", "black")
el = c(0, perm[1], perm[n], n + 1 )
for(i in 1:(n-1))
{
if(abs(perm[i] - perm[i + 1]) != 1)
{
el = c(el, perm[i], perm[i+1])
cols = c(cols, "black")
}
}
perm = c(perm, n + 1)
pos = unlist(lapply(0:length(perm), FUN = function(i) which(perm == i)))
pos = diff(pos)
gray.edges = which(abs(pos) > 1)
for(g in gray.edges)
{
el = c(el, g, g + 1)
cols = c(cols, "red")
}
if(perm[1] != 1){
el = c(el, 0,  1)
cols = c(cols, "red")
}
return(list(el, cols))
}
breakpoint.graph = function(perm)
{
tmp = bpg.edgelist(perm)
edge.list = matrix(tmp[[1]], ncol = 2, byrow = T) # igraph doesn't like 0 as a vertex id.
edge.cols = tmp[[2]]
bpg = graph.edgelist(edge.list + 1, directed = F)
E(bpg)$color = edge.cols
return(bpg)
}
is.balanced = function(graph)
{
edges = E(graph)
edges.cols = E(graph)$color
}
bpg = breakpoint.graph(perm)
degree(bpg)
tmp = bpg.edgelist(perm)
edge.list = matrix(tmp[[1]], ncol = 2, byrow = T) # igraph doesn't like 0 as a vertex id.
edge.list
plot(bpg)
perm = c(3, 5, 2, 6, 4, 1)
bpg.edgelist = function(perm)
{
n = max(perm)
cols = c("black", "black")
el = c(0, perm[1], perm[n], n + 1 )
for(i in 1:(n-1))
{
if(abs(perm[i] - perm[i + 1]) != 1)
{
el = c(el, perm[i], perm[i+1])
cols = c(cols, "black")
}
}
perm = c(perm, n + 1)
pos = unlist(lapply(0:length(perm), FUN = function(i) which(perm == i)))
pos = diff(pos)
gray.edges = which(abs(pos) > 1)
for(g in gray.edges)
{
el = c(el, g, g + 1)
cols = c(cols, "red")
}
if(perm[1] != 1){
el = c(el, 0,  1)
cols = c(cols, "red")
}
return(list(el, cols))
}
breakpoint.graph = function(perm)
{
tmp = bpg.edgelist(perm)
edge.list = matrix(tmp[[1]], ncol = 2, byrow = T) # igraph doesn't like 0 as a vertex id.
edge.cols = tmp[[2]]
bpg = graph.edgelist(edge.list + 1, directed = F)
E(bpg)$color = edge.cols
return(bpg)
}
is.balanced = function(graph)
{
edges = E(graph)
edges.cols = E(graph)$color
}
bpg = breakpoint.graph(perm)
degree(bpg)
plot(bpg)
perm = c(3, 11, 7, 9,5, 4, 2, 6, 1, 8, 12, 10)
# perm = c(3, 5, 2, 6, 4, 1)
bpg.edgelist = function(perm)
{
n = max(perm)
cols = c("black", "black")
el = c(0, perm[1], perm[n], n + 1 )
for(i in 1:(n-1))
{
if(abs(perm[i] - perm[i + 1]) != 1)
{
el = c(el, perm[i], perm[i+1])
cols = c(cols, "black")
}
}
perm = c(perm, n + 1)
pos = unlist(lapply(0:length(perm), FUN = function(i) which(perm == i)))
pos = diff(pos)
gray.edges = which(abs(pos) > 1)
for(g in gray.edges)
{
el = c(el, g, g + 1)
cols = c(cols, "red")
}
if(perm[1] != 1){
el = c(el, 0,  1)
cols = c(cols, "red")
}
return(list(el, cols))
}
breakpoint.graph = function(perm)
{
tmp = bpg.edgelist(perm)
edge.list = matrix(tmp[[1]], ncol = 2, byrow = T) # igraph doesn't like 0 as a vertex id.
edge.cols = tmp[[2]]
bpg = graph.edgelist(edge.list + 1, directed = F)
E(bpg)$color = edge.cols
return(bpg)
}
is.balanced = function(graph)
{
edges = E(graph)
edges.cols = E(graph)$color
}
bpg = breakpoint.graph(perm)
plot(bpg)
is.connected(bpg)
combn(1:3, 3)
?combn
install.packages('gtools')
library(gtools)
?permutations
permutations(5,5)
perms = permutations(5,5)
perms[1,]
perm = perms[1,]
plot(breakpoint.graph(perm))
plot(breakpoint.graph(perms[2,]))
install.packages("rmarkdown")
install.packages("corrplot")
install.packages("ClueR")
install.packages("Hmisc")
install.packages("knitr")
install.packages("limma")
install.packages("MSPrep")
install.packages("bioconductor")
library(bioconductor)
install.packages("preprocessCore")
install.packages("sva")
source("https://bioconductor.org/biocLite.R")
source("http://bioconductor.org/biocLite.R")
biocLite("preprocessCore")
biocLite("sva")
biocLite("pcaMethods")
biocLite("xcms")
biocLite("faahKO")
install.packages("crmn")
library(ggplot2)
install.packages("shiny")
install.packages("shinydashboard")
install.packages("markdown")
install.packages("d3heatmap")
install.packages("devtools")
install.packages("mplot")
install.packages("devtools")
library(devtools)
install_github("garthtarr/edgebundleR")
install_github("garthtarr/pairsD3")
install.packages("networkD3")
require(googleVis)
demo(WorldBank, package = "googleVis")
install.packages("magrittr")
library(magrittr)
install.packages(c("readr", "tidyr", "dplyr"))
require(readr)
original_data = read_delim("http://www.maths.usyd.edu.au/u/gartht/Brauer2008_DataSet1.tds", delim = "\t")
View(original_data)
nutrient_names <- c(G = "Glucose", L = "Leucine", P = "Phosphate", S = "Sulfate", N = "Ammonia", U = "Uracil")
cleaned_data = original_data %>%
separate(NAME,
c("name", "BP", "MF", "systematic_name", "number"),
sep = "\\|\\|") %>%
mutate_each(funs(trimws), name:systematic_name) %>%
select(-number, -GID, -YORF, -GWEIGHT)  %>%
gather(sample, expression, G0.05:U0.3) %>%
separate(sample, c("nutrient", "rate"), sep = 1, convert = TRUE) %>%
mutate(nutrient = plyr::revalue(nutrient, nutrient_names)) %>%
filter(!is.na(expression), systematic_name != "")
require(dplyr)
require(tidyr)
cleaned_data = original_data %>%
separate(NAME,
c("name", "BP", "MF", "systematic_name", "number"),
sep = "\\|\\|") %>%
mutate_each(funs(trimws), name:systematic_name) %>%
select(-number, -GID, -YORF, -GWEIGHT)  %>%
gather(sample, expression, G0.05:U0.3) %>%
separate(sample, c("nutrient", "rate"), sep = 1, convert = TRUE) %>%
mutate(nutrient = plyr::revalue(nutrient, nutrient_names)) %>%
filter(!is.na(expression), systematic_name != "")
View(cleaned_data)
cleaned_data %>%
filter(BP == "leucine biosynthesis") %>%
ggplot(aes(rate, expression, color = nutrient)) +
geom_line() +
facet_wrap(~name)
library(ggplot2)
cleaned_data %>%
filter(BP == "leucine biosynthesis") %>%
ggplot(aes(rate, expression, color = nutrient)) +
geom_line() +
facet_wrap(~name)
```{r simpleplot, echo=FALSE}
x <- c(1:9, 8:1)
y <- c(1, 2*(5:3), 2, -1, 17, 9, 8, 2:9)
op <- par(mfcol = c(3, 1))
for(xpd in c(FALSE, TRUE, NA)) {
plot(1:10, main = paste("xpd =", xpd))
box("figure", col = "pink", lwd = 3)
polygon(x, y, xpd = xpd, col = "orange", lty = 2, lwd = 2, border = "red")
}
par(op)
polygon(x=c(0,1,2,3), y=c(0,1,1,0))
polygon(x=c(0,1,2,3), y=c(0,1,1,0))
setwd("/Applications/MAMP/htdocs/mfpdb/src/data")
sensors = read.csv("01160309DENX-TKTK-long.csv")
sensors[which(sensors$response > -0.45 & sensors$response < -0.125),]
data = sensors[which(sensors$response > -0.45 & sensors$response < -0.125),]
View(sensors)
sensors[12305,]
shortsensor = sensors[c(1,2,3,4,5,6,7),]
library(ggplot2)
ggplot(sensors[1:35,], aes(timestamp, response)) + geom_line()
ggplot(sensors[1:35,], aes(timestamp, response)) + geom_point()
setwd("~/GitWorkArea/atmospheric-tomography/data/unprocessed/0805-1305")
ginninderra.tz = "Australia/Canberra"
concentration = "0805-1305-raw.csv"
weather.file = "0805-1305-weather.csv"
cbPalette= c("#999999", "#E69F00", "#56B4E9", "#009E73", "#F0E442", "#0072B2",
"#D55E00", "#CC79A7")
library(ggplot2)
library(plyr)
library(dplyr)
library(magrittr)
library(lubridate)
gasfinder = read.csv(concentration) %>% .[, c("Date", "Reflector", "PPM")]
gasfinder %<>%
mutate(Date = Date %>% parse_date_time(c("%d/%m/%Y %I:%M:%S %p"), exact=T, tz=ginninderra.tz))
gasfinder$Reflector = factor(gasfinder$Reflector)
head(gasfinder)
start.high = as.POSIXct("2015-05-12 11:56:00", tz=ginninderra.tz)
end.high = as.POSIXct("2015-05-12 12:02:00", tz=ginninderra.tz)
gasfinder %<>% .[(.$Date < start.high | .$Date > end.high),]
start.high = as.POSIXct("2015-05-13 14:13:00", tz=ginninderra.tz)
end.high = as.POSIXct("2015-05-13 14:36:00", tz=ginninderra.tz)
gasfinder %<>% .[(.$Date < start.high | .$Date > end.high),]
thirty.mins = cut(gasfinder$Date, breaks="30 min")
gasfinder.avg = gasfinder %>% split(thirty.mins) %>%
ldply(function(dat) {ddply(dat, .(Reflector), function(x) mean(x$PPM))}) %>%
plyr::rename(c(".id"="Date", "V1"="PPM"))
gasfinder.avg$Date = as.POSIXct(gasfinder.avg$Date, tz=ginninderra.tz)
gasfinder.avg %<>% reshape2::dcast(Date ~ Reflector, value.var="PPM")
mean.smallest.n = function(row, n){
bg = row  %>% sort(na.last = NA) %>% .[1:min(n, dim(.)[2])] %>% .[which(. > 0)] %>% mean
return(bg)
}
bg= apply(gasfinder.avg[,2:8], MARGIN = 1, FUN = mean.smallest.n, n=5)
gasfinder.avg %<>% cbind(.,Background=bg)
gasfinder.avg[, 2:8] =  gasfinder.avg[, 2:8] - bg
gasfinder.avg %<>% .[,!names(.) %in% c("Background")]
collated = merge(weather, gasfinder.avg)
weather = read.csv(weather.file) %>%
mutate(Date = Date %>% parse_date_time(c("%Y-%m-%d %H:%M:%S"), exact=T, tz=ginninderra.tz))
collated = merge(weather, gasfinder.avg)
id.cols = c("Date","Temperature", "WindSpeed", "WindDirection", "MO_Length","P_EC100_mean")
collated %<>%
reshape2::melt(id.var = id.cols) %<>%
.[.$value >0,] %<>%
.[complete.cases(.),] %<>%
plyr::rename(c("variable"="Reflector", "value"="PPM"))
filter_sd = function(x){return(x[x$PPM > sd(x$PPM) ,])}
collated %<>%
ddply( .(Reflector), filter_sd) %<>%
.[.$WindSpeed > 1.5 & .$WindSpeed < 9,]
View(collated)
collated.op = "0805-1305-collated-highrelease-filtered.csv"
cols.order = c("Temperature", "P_EC100_mean", "WindSpeed", "WindDirection", "MO_Length", "Reflector", "PPM")
collated %>% .[, cols.order] %>%
write.csv(file=collated.op, row.names=F, quote=F)
setwd("~/GitWorkArea/atmospheric-tomography")
info = read.csv("summary.csv")
View(info)
setwd("~/GitWorkArea/atmospheric-tomography/data/unprocessed/0805-1305")
ginninderra.tz = "Australia/Canberra"
concentration = "0805-1305-raw.csv"
weather.file = "0805-1305-weather.csv"
cbPalette= c("#999999", "#E69F00", "#56B4E9", "#009E73", "#F0E442", "#0072B2",
"#D55E00", "#CC79A7")
gasfinder = read.csv(concentration) %>% .[, c("Date", "Reflector", "PPM")]
gasfinder %<>%
mutate(Date = Date %>% parse_date_time(c("%d/%m/%Y %I:%M:%S %p"), exact=T, tz=ginninderra.tz))
gasfinder$Reflector = factor(gasfinder$Reflector)
start.high = as.POSIXct("2015-05-13 00:00:00", tz=ginninderra.tz)
end.high = as.POSIXct("2015-05-14 00:00:00", tz=ginninderra.tz)
gasfinder %<>% .[(.$Date < start.high | .$Date > end.high),]
thirty.mins = cut(gasfinder$Date, breaks="30 min")
gasfinder.avg = gasfinder %>% split(thirty.mins) %>%
ldply(function(dat) {ddply(dat, .(Reflector), function(x) mean(x$PPM))}) %>%
plyr::rename(c(".id"="Date", "V1"="PPM"))
gasfinder.avg$Date = as.POSIXct(gasfinder.avg$Date, tz=ginninderra.tz)
gasfinder.avg %<>% reshape2::dcast(Date ~ Reflector, value.var="PPM")
mean.smallest.n = function(row, n){
bg = row  %>% sort(na.last = NA) %>% .[1:min(n, dim(.)[2])] %>% .[which(. > 0)] %>% mean
return(bg)
}
bg= apply(gasfinder.avg[,2:8], MARGIN = 1, FUN = mean.smallest.n, n=5)
gasfinder.avg %<>% cbind(.,Background=bg)
gasfinder.avg[, 2:8] =  gasfinder.avg[, 2:8] - bg
gasfinder.avg %<>% .[,!names(.) %in% c("Background")]
weather = read.csv(weather.file) %>%
mutate(Date = Date %>% parse_date_time(c("%Y-%m-%d %H:%M:%S"), exact=T, tz=ginninderra.tz))
collated = merge(weather, gasfinder.avg)
id.cols = c("Date","Temperature", "WindSpeed", "WindDirection", "MO_Length","P_EC100_mean")
collated %<>%
reshape2::melt(id.var = id.cols) %<>%
.[.$value >0,] %<>%
.[complete.cases(.),] %<>%
plyr::rename(c("variable"="Reflector", "value"="PPM"))
filter_sd = function(x){return(x[x$PPM > sd(x$PPM) ,])}
collated %<>%
ddply( .(Reflector), filter_sd) %<>%
.[.$WindSpeed > 1.5 & .$WindSpeed < 9,]
collated.op = "1305-collated.csv"
cols.order = c("Temperature", "P_EC100_mean", "WindSpeed", "WindDirection", "MO_Length", "Reflector", "PPM")
collated %>% .[, cols.order] %>%
write.csv(file=collated.op, row.names=F, quote=F)
View(gasfinder)
ggplot(gasfinder, aes(Date, PPM, color=Reflector)) + geom_point() +  scale_colour_manual(values=cbPalette)
View(gasfinder.avg)
View(gasfinder)
gasfinder = read.csv(concentration) %>% .[, c("Date", "Reflector", "PPM")]
gasfinder %<>%
mutate(Date = Date %>% parse_date_time(c("%d/%m/%Y %I:%M:%S %p"), exact=T, tz=ginninderra.tz))
gasfinder$Reflector = factor(gasfinder$Reflector)
start.high = as.POSIXct("2015-05-13 00:00:00", tz=ginninderra.tz)
end.high = as.POSIXct("2015-05-14 00:00:00", tz=ginninderra.tz)
gasfinder %<>% .[(.$Date > start.high & .$Date < end.high),]
View(gasfinder)
thirty.mins = cut(gasfinder$Date, breaks="30 min")
gasfinder.avg = gasfinder %>% split(thirty.mins) %>%
ldply(function(dat) {ddply(dat, .(Reflector), function(x) mean(x$PPM))}) %>%
plyr::rename(c(".id"="Date", "V1"="PPM"))
gasfinder.avg$Date = as.POSIXct(gasfinder.avg$Date, tz=ginninderra.tz)
gasfinder.avg %<>% reshape2::dcast(Date ~ Reflector, value.var="PPM")
mean.smallest.n = function(row, n){
bg = row  %>% sort(na.last = NA) %>% .[1:min(n, dim(.)[2])] %>% .[which(. > 0)] %>% mean
return(bg)
}
bg= apply(gasfinder.avg[,2:8], MARGIN = 1, FUN = mean.smallest.n, n=5)
gasfinder.avg %<>% cbind(.,Background=bg)
gasfinder.avg[, 2:8] =  gasfinder.avg[, 2:8] - bg
gasfinder.avg %<>% .[,!names(.) %in% c("Background")]
collated = merge(weather, gasfinder.avg)
id.cols = c("Date","Temperature", "WindSpeed", "WindDirection", "MO_Length","P_EC100_mean")
collated %<>%
reshape2::melt(id.var = id.cols) %<>%
.[.$value >0,] %<>%
.[complete.cases(.),] %<>%
plyr::rename(c("variable"="Reflector", "value"="PPM"))
filter_sd = function(x){return(x[x$PPM > sd(x$PPM) ,])}
collated %<>%
ddply( .(Reflector), filter_sd) %<>%
.[.$WindSpeed > 1.5 & .$WindSpeed < 9,]
View(collated)
collated.op = "1305-collated.csv"
cols.order = c("Temperature", "P_EC100_mean", "WindSpeed", "WindDirection", "MO_Length", "Reflector", "PPM")
collated %>% .[, cols.order] %>%
write.csv(file=collated.op, row.names=F, quote=F)
ggplot(gasfinder, aes(Date, PPM, color=Reflector)) + geom_point() +  scale_colour_manual(values=cbPalette)
ginninderra.tz = "Australia/Canberra"
concentration = "0805-1305-raw.csv"
weather.file = "0805-1305-weather.csv"
cbPalette= c("#999999", "#E69F00", "#56B4E9", "#009E73", "#F0E442", "#0072B2",
"#D55E00", "#CC79A7")
gasfinder = read.csv(concentration) %>% .[, c("Date", "Reflector", "PPM")]
gasfinder %<>%
mutate(Date = Date %>% parse_date_time(c("%d/%m/%Y %I:%M:%S %p"), exact=T, tz=ginninderra.tz))
gasfinder$Reflector = factor(gasfinder$Reflector)
start.high = as.POSIXct("2015-05-13 00:00:00", tz=ginninderra.tz)
end.high = as.POSIXct("2015-05-14 00:00:00", tz=ginninderra.tz)
gasfinder %<>% .[(.$Date > start.high & .$Date < end.high),]
thirty.mins = cut(gasfinder$Date, breaks="30 min")
gasfinder.avg = gasfinder %>% split(thirty.mins) %>%
ldply(function(dat) {ddply(dat, .(Reflector), function(x) mean(x$PPM))}) %>%
plyr::rename(c(".id"="Date", "V1"="PPM"))
gasfinder.avg$Date = as.POSIXct(gasfinder.avg$Date, tz=ginninderra.tz)
gasfinder.avg %<>% reshape2::dcast(Date ~ Reflector, value.var="PPM")
mean.smallest.n = function(row, n){
bg = row  %>% sort(na.last = NA) %>% .[1:min(n, dim(.)[2])] %>% .[which(. > 0)] %>% mean
return(bg)
}
bg= apply(gasfinder.avg[,2:8], MARGIN = 1, FUN = mean.smallest.n, n=5)
gasfinder.avg %<>% cbind(.,Background=bg)
gasfinder.avg[, 2:8] =  gasfinder.avg[, 2:8] - bg
gasfinder.avg %<>% .[,!names(.) %in% c("Background")]
weather = read.csv(weather.file) %>%
mutate(Date = Date %>% parse_date_time(c("%Y-%m-%d %H:%M:%S"), exact=T, tz=ginninderra.tz))
collated = merge(weather, gasfinder.avg)
id.cols = c("Date","Temperature", "WindSpeed", "WindDirection", "MO_Length","P_EC100_mean")
collated %<>%
reshape2::melt(id.var = id.cols) %<>%
.[.$value >0,] %<>%
.[complete.cases(.),] %<>%
plyr::rename(c("variable"="Reflector", "value"="PPM"))
filter_sd = function(x){return(x[x$PPM > sd(x$PPM) ,])}
collated %<>%
ddply( .(Reflector), filter_sd) %<>%
.[.$WindSpeed > 1.5 & .$WindSpeed < 9,]
collated.op = "1305-collated.csv"
cols.order = c("Temperature", "P_EC100_mean", "WindSpeed", "WindDirection", "MO_Length", "Reflector", "PPM")
collated %>% .[, cols.order] %>%
write.csv(file=collated.op, row.names=F, quote=F)
ggplot(gasfinder, aes(x=PPM)) + geom_density()
ggplot(gasfinder, aes(PPM)) +
geom_histogram(aes(y = ..density..)) +
stat_function(fun = dlaplace,
args = list(mean = 0.24),
lwd = 2,
col = 'red')
dlaplace(5, 2, 1)
library(distr)
install.packages(distr)
install.packages("distr")
library(distr)
ggplot(gasfinder, aes(PPM)) +
geom_histogram(aes(y = ..density..)) +
stat_function(fun = DExp ,
args = list(rate = 0.24),
lwd = 2,
col = 'red')
ggplot(gasfinder, aes(PPM)) +
geom_histogram(aes(y = ..density..)) +
stat_function(fun = DExp ,
args = list(rate = 0.24),
col = 'red')
distr::DExp()
?distr::DExp()
?distr::DExp
setwd("~/GitWorkArea/atmospheric-tomography/src")
